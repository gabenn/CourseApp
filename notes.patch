diff --git a/app/Http/Controllers/Api/WordsController.php b/app/Http/Controllers/Api/WordsController.php
index b14b9c1..216dff6 100644
--- a/app/Http/Controllers/Api/WordsController.php
+++ b/app/Http/Controllers/Api/WordsController.php
@@ -29,6 +29,7 @@ class WordsController extends Controller
      */
     public function store(WordRequest $request)
     {
+        // To jest logika którą powinien zając się serwis
         $course = $request->course_id==0 ? Course::latest()->first() : Course::find($request->course_id);       
 
         return $course->words()->createMany($request->words);
diff --git a/app/Http/Controllers/ShowController.php b/app/Http/Controllers/ShowController.php
index ebc8ed3..60eb575 100644
--- a/app/Http/Controllers/ShowController.php
+++ b/app/Http/Controllers/ShowController.php
@@ -9,8 +9,35 @@ use Illuminate\Foundation\Bus\DispatchesJobs;
 use Illuminate\Foundation\Validation\ValidatesRequests;
 use Illuminate\Routing\Controller as BaseController;
 
-
-class ShowController extends BaseController
+/**
+ * Mimo małego rozmiaru, kontroler wie trochę za dużo; Gdybyśmy chcieli zmienić sposób przechowywania modeli czy dostarczania informacji,
+ * kontroler musiałby ulec zmianom ponieważ wczytuje dane bezpośrednio.
+ * 
+ * Zamiast tego zastosowałbym strukturę Kontroler - Serwis, gdzie kontroler jest odpowiedzialny za dostarczanie danych, a serwis za zapisywanie i odczytywanie danych.
+ * Kontroler nie musi, a nawet bardzo często nie powinien, być świadomy dokładnego sposobu przechowywania danych.
+ * 
+ * Przykładowa lektura: https://farhan.dev/tutorial/laravel-service-classes-explained/
+ * 
+ * Trzymanie wszystkiego w ShowController tu jest okej, bo aplikacja jest małych rozmiarów; w takim sensie, że ilość kodu nie jest na tyle duża, żeby zrobiło się chaotycznie.
+ * Mimo wszystko podzieliłbym ShowController na dwa kontrolery w zależności od tego co jest głównym punktem; CourseController i WordsController.
+ * 
+ * Przez to że jest jeden kontroler od widoków, dodawanie kolejnych ścieżek do routera spowoduje że zrobi się tu chaotycznie, bo jeden kontroler zajmuje się wyświetlaniem wszystkich widoków.
+ * 
+ * Fajny jest podział kontrolerów, w takim sensie że CourseController i WordsController są pod Controllers/Api - od razu wiem czego się po nich spodziewać i co zawierają bez patrzenia na nie.
+ * To samo można zrobić tutaj, poprawiłoby to czytelność.
+ * 
+ * - Controllers
+ *  - Api
+ *    - CourseController.php
+ *    - WordsController.php
+ *  - Web
+ *   - CourseController.php
+ *   - WordsController.php
+ * 
+ * 
+ * Przykładowa lektura: https://laracasts.com/discuss/channels/laravel/seperate-controllers-for-api-and-web
+ */
+class ShowController extends BaseController // chyba powinno być extends Controller skoro już jest przygotowany
 {
     use AuthorizesRequests, DispatchesJobs, ValidatesRequests;
     
@@ -40,12 +67,22 @@ class ShowController extends BaseController
         return view('course', ['course' => $course, 'words' => $words]);
     }
 
+    /** 
+    * Listowanie wszystkich słów może być kosztowne jeśli w bazie będą setki, jeśli nie tysiące. Warto zajrzeć w pagination,
+    * tym bardziej że Laravel znacząco to ułatwia. https://laravel.com/docs/9.x/pagination
+    * Dzięki temu nawet przy dużych ilościach danych, czyli potencjalnym środowisku produkcyjnym, aplikacja będzie responsywna i dane będą szybko się wczytywać.
+    *
+    * Oczywiście to samo się odnosi do listowania kursów, ale przy słowach jest to zdecydowanie ważniejsze; na jeden kurs przypada wiele słów.
+    * Wystarczy to zrobić chociaż dla słów, żeby potencjalny rekruter zobaczył że wiesz o co chodzi i bawiłeś się stronicowaniem.
+    */
     function words(){
         $words = Word::all();
         return view('words', ['words' => $words]);
     }
 
-    
+    /**
+     * Zauważ że test, add i edit ściągają dane w ten sam sposób; wystawienie logiki do serwisu zniwelowałoby te i przyszłe duplikacje kodu
+     */
     function test($courseId){
         
         $course = Course::find($courseId);
diff --git a/resources/js/components/AddComponent.vue b/resources/js/components/AddComponent.vue
index c3d68f6..3b4e068 100644
--- a/resources/js/components/AddComponent.vue
+++ b/resources/js/components/AddComponent.vue
@@ -58,6 +58,8 @@
 import WordInput from "./WordInputComponent";
 import ModalComponent from "./ModalComponent";
 
+// Zdecydowanie nie w ten sposób.
+// Zajrzyj w enumy i je tu zastosuj.
 const ADD = true;
 const EDIT = false;
 
@@ -97,13 +99,18 @@ export default {
             });
         },
         removeInput(value) {
+            // Alternatywnie można użyć splice; slice zazwyczaj się używa kiedy przed przypisaniem chcesz coś sprawdzić; tutaj zmieniasz words tak czy siak, więc splice może być bardziej eleganckie
             this.words = this.words.slice(0, value);
             if (this.words.length === 0) {
                 this.addInput();
             }
         },
         validate() {
+            // Co jeśli mamy kilka błędów? Obecnie wyświetla się ostatni znaleziony. Pomyślałbym, żeby zmienić modal chociażby na toast notifications (wyskakujące powiadomienia) i na każdy znaleziony błąd wyświetlać toast.
+            // Obecnie jeśli mam dwa błędy i poprawię jeden to mi wyskakuje kolejny model który muszę odklikać i poprawić kolejny błąd i tak w kółko; strasznie frustrujący design.
             if (this.name === "") {
+                // Wygląda na to, że warto error włożyć w jakiś obiekt z polami { title: "", message: "" } - wtedy zamiast error = true możesz przypisać ten obiekt i sprawdzać czy error nie jest nullowy.
+                // Takie zgrupowane informacje lepiej trzymać w obiekcie, nie jako osobne pola.
                 this.error = true;
                 this.errorTitle = "Course Name Error";
                 this.errorMessage = "Course Name input is empty";
@@ -118,6 +125,8 @@ export default {
                     this.error = true;
                     this.errorTitle = "Words Error";
                     this.errorMessage = "Fill All Inputs";
+                    // tu warto zrobić return; 
+                    // jeśli mamy już błąd to nie ma sensu loopować przez kolejne potencjalne setki słów.
                 }
             });
         },
@@ -131,6 +140,8 @@ export default {
                     words: [],
                     course_id: 0,
                 };
+                // Zmienna this.status jest nieczytelna; czytając kod nie jestem w stanie stwierdzić bez grzebania w kodzie czym jest status. Co to znaczy że status = true? Zmieniłbym nazwę zmiennej na coś jaśniejszego albo wogóle zmienił status
+                // na jakiś state; enum z wartościami COURSE_ADD i COURSE_EDIT. Wtedy jak w kodzie zobacze if (this.state === COURSE_ADD) to od razu wiem, co się dzieje.
                 if (this.status) {
                     const courseData = {
                         name: this.name,
@@ -147,12 +158,13 @@ export default {
                             axios
                                 .post(`/api/words`, data)
                                 .then((res) => console.log(response))
-                                .catch((error) => console.log(error.response));
+                                .catch((error) => console.log(error.response)); // Warto poinformować użytkowniak o tym, że wystąpił błąd (toast)
                         })
-                        .catch((error) => console.log(error))
+                        .catch((error) => console.log(error)) // Warto poinformować użytkownika o tym, że wystąpił błąd (np. przez toast)
                         .then(() => (window.location.href = "/courses"));
                 } else {
                     const course = JSON.parse(this.course);
+                    // Mała rzecz, ale wordsProps żeby być konsekwentnym z nazwami.
                     const words = JSON.parse(this.wordsprops);
                     data.course_id = course.id;
 
@@ -163,7 +175,7 @@ export default {
                                 axios
                                     .delete(`/api/words/${item.id}`)
                                     .then((res) => console.log(res))
-                                    .catch((error) => console.log(error))
+                                    .catch((error) => console.log(error)) // użytkownik
                             );
                         })
                         .then((res) => {
@@ -176,7 +188,7 @@ export default {
                             axios
                                 .post(`/api/words`, data)
                                 .then((res) => console.log(res))
-                                .catch((error) => console.log(error));
+                                .catch((error) => console.log(error)); // użytkownik
                         })
                         .catch((error) => console.log(error))
                         .then(() => (window.location.href = "/courses"));
@@ -192,7 +204,7 @@ export default {
         if (this.course !== undefined) {
             this.status = EDIT;
             this.words = [];
-            this.name = JSON.parse(this.course).name;
+            this.name = JSON.parse(this.course).name; // Mało realistyczny scenariusz, ale co jeśli json parse nawali?
             JSON.parse(this.wordsprops).forEach((word) => {
                 this.words.push({
                     polish: word.polish,
@@ -200,6 +212,7 @@ export default {
                 });
             });
         } else {
+            // status?
             this.statut = ADD;
         }
     },
diff --git a/resources/js/components/TestComponent.vue b/resources/js/components/TestComponent.vue
index aa4129e..0c81f25 100644
--- a/resources/js/components/TestComponent.vue
+++ b/resources/js/components/TestComponent.vue
@@ -93,25 +93,40 @@ export default {
     props: ["course", "words"],
     data() {
         return {
-            activeWord: 1,
-            answer: '',
+            // Lekki problem z nazewnictwem zmiennych, podrzuciłem sugestie które spowodują że czytanie kodu stanie się przyjemniejsze.
+            activeWord: 1, // currentWord
+            answer: '', // currentAnswer
             answers: [],
-            good: 0,
+            good: 0, // może zamiast good to score
             wordsArray: [],
             startTime: new Date(),
             totalTime:0,
             maxTime:0,
-            error: false,
-            errorTitle: "",
-            errorMessage: "",
-            test: true,
-            cheat: false,
-            pass: false,
+            error: false, 
+            /**
+            * error = {
+            *  title = '',
+            *  message = '',   
+            * }
+            */
+            errorTitle: "",  
+            errorMessage: "",  
+            test: true, // mało czytelna nazwa zmiennej
+            cheat: false, // didCheat
+            pass: false, // didPass?
         };
     },
     methods: {
         confirm() {
             this.validate();
+            // Zamiast if (!this.error) validate może zwracać true/false - jeśli false to walidacja się nie powiodła
+            
+            /**
+            * const didValidate = this.validate();
+            *
+            * if (didValidate) { ... }
+            */
+
             if (!this.error) {
                 this.answer = this.answer.toLowerCase(); 
                 this.answers.push(this.answer);
@@ -129,13 +144,17 @@ export default {
                     this.$refs.answerInput.focus();
                 } else {
                     this.test = false;
+
+                    // wszystko niżej wrzuciłbym do metody finishTest albo calculateScore, czytając co się dzieje przy potwierdzaniu nie muszę znać detali tego jak wynik jest uzyskiwany; robi się też lekki bałagan
                     this.totalTime = (new Date().getTime() - this.startTime.getTime())/1000
                     const score = this.good/this.activeWord; 
                     const passTime = this.totalTime < this.maxTime;
+
+                    // if bez klamry i else z klamrami to trochę messy kod.
                     if(score > 0.5 && passTime) this.pass = true
                     else {
                         this.pass = false
-                        if(score < 0.5 && !passTime) this.errorMessage = 'Score < 50% And Time > Max Test Time'
+                        if(score < 0.5 && !passTime) this.errorMessage = 'Score < 50% And Time > Max Test Time' // Nie powinniśmy raczej traktować słabego wyniku jako error; to nie błąd a informacja
                         else if(score < 0.5) this.errorMessage = "Score < 50%"
                         else if(!passTime) this.errorMessage = "Time > Max Test Time"
                     }
@@ -148,11 +167,16 @@ export default {
         },
         reRun: () => document.location.reload(),
         validate() {
+            // error lepiej jako obiekt
             if (this.answer === "") {
                 this.error = true;
                 this.errorTitle = "Answer Input Error";
                 this.errorMessage = "Answer input is empty";
+
+                // return false;
             }
+
+            // return true;
         },
         closeModal() {
             this.error = false;
@@ -160,6 +184,8 @@ export default {
     },
     created() {
         this.wordsArray = JSON.parse(this.words);
+
+        // Zamiast sprawdzać w pętli czy ktoś alt tabuje, możesz raczej skorzystać z HTMLowych eventów blur i focus; https://developer.mozilla.org/en-US/docs/Web/API/Window/focus_event. Będzie na pewno wydajniej.
         const cheaterInterval = window.setInterval(() => {
             if (!document.hasFocus()) {
                 this.cheat = true;
diff --git a/resources/views/test.blade.php b/resources/views/test.blade.php
index d74efe2..f26324c 100644
--- a/resources/views/test.blade.php
+++ b/resources/views/test.blade.php
@@ -25,6 +25,12 @@
     </head>
     <body class="antialiased">
         <div class="container">
+            <!-- Definiowanie nagłówka w każdym pliku jest strasznie redundantne i niepotrzebne. Jak będziesz chciał zmienić header to będziesz musiał przerobić 10 różnych plików z każdą pierdołą.
+                Proponowałbym zdefiniowanie nagłówka w jednym pliku i załączanie go do pozostałych plików przez @include.
+                Nie jest to problem z działaniem aplikacji ale zdecydowanie design problem; takich duplikacji lepiej jak najbardziej unikać.
+
+                https://stackoverflow.com/questions/41074473/laravel-load-common-header-and-footer-to-view
+            -->
             <header class="d-flex justify-content-center py-3">
                 <ul
                     class="nav col-12 col-md-auto mb-2 justify-content-center mb-md-0"
@@ -49,6 +55,7 @@
         <div id='app' class="mx-5">
             <test-component course="{{$course}}" words="{{$words}}"><test-component>
         </div>
+        <!-- Tak samo jak w przypadku nagłówka; stopkę można zdefiniować w osobnym pliku i załączać tam, gdzie tylko jest potrzeba. -->
         <footer class="my-5 pt-5 text-muted text-center text-small">
             <p class="mb-1">© 2022 Łukasz Cysewski</p>
         </footer>
diff --git a/resources/views/welcome.blade.php b/resources/views/welcome.blade.php
index 1557c4d..d6bd988 100644
--- a/resources/views/welcome.blade.php
+++ b/resources/views/welcome.blade.php
@@ -55,6 +55,7 @@
                         <li><a href="/add-course" class="nav-link px-2 link-dark">Add Course</a></li>
                     </ul>
                 </header>
+                 <!-- Lorem ipsum w aplikacji demo średnio wygląda; lepiej zwykły welcome screen z krótkim opisem aplikacji, może co zmotywowało Cię akurat do takiej tematyki, krótki tutorial, cokolwiek; jakakolwiek informacja dzięki której rekruter może Cię poznać jest lepsza niż lorem ipsum na wejściu -->
                 <h1>Hello world</h1>
                 <div>
                     Lorem ipsum dolor sit, amet consectetur adipisicing elit. Porro itaque, explicabo quaerat tempore odit iure ea aperiam suscipit enim ipsum consectetur corporis. Modi sequi suscipit optio illo vel, officiis nostrum.    
diff --git a/tests/Unit/ExampleTest.php b/tests/Unit/ExampleTest.php
index 62e8c3c..91dffdd 100644
--- a/tests/Unit/ExampleTest.php
+++ b/tests/Unit/ExampleTest.php
@@ -4,6 +4,10 @@ namespace Tests\Unit;
 
 use PHPUnit\Framework\TestCase;
 
+/**
+ * Zdecydowanie przydałyby się jakieś testy, nawet najprostsze; pokazuje to że wiesz jak dbać o jakość kodu i że masz jakiekolwiek doświadczenie z testami, co w pracy ma duże znaczenie.
+ */
+
 class ExampleTest extends TestCase
 {
     /**
